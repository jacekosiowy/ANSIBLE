--- # Playbook to deploy Apache Cassandra Cluster Node on Linux UBUNTU
- name: Deploy Cassandra Node as apt package
  hosts: deploy_new_cassandra_ubuntu
  serial: 1
  become: yes
#  vars:
#    time_server: "server ntp.toya.net.pl"
#    time_server_pkg: "chrony"
#    cassandra_home_dir: /var/lib/cassandra
#    cassandra_home_path: "{{ cassandra_home_dir }}/{{ cassandra_home_bin }}"
#    cassandra_data_dir: "{{ cassandra_home_dir }}/data"
#    java_pkg: openjdk-8-jre
#    git_pkg: git
#    screen_pkg: screen
#    cassandra_pkg: cassandra
#    cassandra_tools_pkg: cassandra-tools
#    firewall_service: ufw
#    cassandra_admin_id: 1001
#    cassandra_group_id: 1001
#    cassandra_password: redhat77!
#    cassandra_user: cassandra
#    cassandra_group: cassandra
#    cassandra_existing_hosts: 
#      - '30.30.30.139 jolnvmu34'
#      - '30.30.30.140 jolnvmu35'
#      - '30.30.30.141 jolnvmu36'
#    cassandra_conf_file: "/etc/cassandra/cassandra.yaml"
#    cassandra_conf_cluster_name: "cluster_name: \'JOUbuntuCluster1\'"
#    cassandra_conf_data_file_dir: "data_file_directories:"
#    cassandra_conf_data_file_dir_l1: "    - {{ cassandra_home_dir }}/data"
#    cassandra_conf_commitlog_dir: "commitlog_directory: {{ cassandra_home_dir }}/commitlog"
#    cassandra_conf_saved_cache_dir: "saved_caches_directory: {{ cassandra_home_dir }}/saved_caches"
#    cassandra_conf_hints_dir: "hints_directory:  {{ cassandra_home_dir }}/hints"
#    cassandra_conf_seeds: "          - seeds: \"jolnvmu34\""
#    cassandra_conf_listen_address: "listen_address: "
#    cassandra_conf_rpc_address: "rpc_address: "
#    cassandra_conf_snitch_regex: ".*endpoint_snitch:.*"
#    cassandra_conf_snitch_value: "endpoint_snitch: GossipingPropertyFileSnitch"
#    standard_delay: "30"
#    check_bootstrap_file: "/var/log/cassandra/system.log"
#    first_host_in_cluster: "jolnvmu34"
  tasks:
     - name: Include the variables from the YAML file
       include_vars: vars/ubuntu_variables_deploy.yml
     - name: Install the required packages
       apt:
         pkg:
         - "{{ git_pkg  }}"
         - "{{ screen_pkg }}"
         - "{{ java_pkg }}"
         - "{{ time_server_pkg }}"
         - "python-apt"
         state: present
     - name: Create the remote cassandra directory
       file:
         state: directory
         recurse: yes
         path: "{{ cassandra_home_dir }}"
     - name: Add the Apache repository of Cassandra
       shell: "echo \"deb https://downloads.apache.org/cassandra/debian 311x main\" | tee -a /etc/apt/sources.list.d/cassandra.sources.list"
     - name: Add the Apache Cassandra repository keys
       shell: "curl https://downloads.apache.org/cassandra/KEYS | apt-key add -"
     - name: Update the repositories (cache)
       shell: "apt-get update"
       ignore_errors: yes
       #       apt:
       #  update_cache: yes
       #     - name: Upgrade Ubuntu packages
       #"apt-get -y upgrade"
       #apt:
       #  upgrade: yes
     - name: Install the Cassandra packages
       apt:
         pkg:
         - "{{ cassandra_pkg  }}"
         - "{{ cassandra_tools_pkg }}"
         state: present
     - name: Stop service cassandra
       systemd:
         name: cassandra
         state: stopped
     - name: Remove cassandra data directory
       shell: "/bin/rm -rf {{ cassandra_home_dir }}/data/*"
     - name: Modify cassandra conf file
       import_tasks: tasks/modify_cassandra_conf.yml
       #     - name: Modify cassandra user profile 
       #import_tasks: tasks/modify_user_profile.yml
     - name: Start and enable the {{ firewall_service }} firewall service
       systemd:
         name: "{{ firewall_service }}"
         enabled: true
         state: started
     - name: Open ports for Cassandra
       ufw:
         rule: allow
         port: "{{ item }}"
         proto: tcp
         state: enabled
       loop:
         - '7000'
         - '7001'
         - '7199'
         - '9042'
         - '9160'
         - '9142'
     - name: Check firewall ...
       shell: "ufw status verbose"
       register: fw_out
     - name: Show firewall status
       debug:
         msg: "{{ fw_out.stdout.split('\n') }}"
     - name: Modify /etc/hosts file
       import_tasks: tasks/modify_etc_hosts.yml
     - name: Set time server
       import_tasks: tasks/time_server_chrony_ubuntu.yml
     - name: Enable service cassandra
       systemd:
         name: cassandra
         enabled: yes
     - name: Start service cassandra
       systemd:
         name: cassandra
         state: started
         #     - name: Check bootstrap nodetool bootstrap resume
         #       shell: "nodetool bootstrap resume"
         # register: bootstrap_out
         # until: bootstrap_out.stdout == "Node is already bootstrapped."
         #- name: Check outout nodetool bootstrap resume
         #debug:
         #msg: "{{ bootstrap_out.stdout.split('\n') }}"
     - name: Wait until the string "Bootstrap completed" is in the file {{ check_bootstrap_file }} before continuing
       wait_for:
         path: "{{ check_bootstrap_file }}"
         search_regex: "Bootstrap completed"
         timeout: 120
       when: 'ansible_hostname != first_host_in_cluster|string'
     - name: Pause for 2 minutes to build up first cassandra node
       pause:
         minutes: 2
       when: 'ansible_hostname == first_host_in_cluster|string'
     - name: Check status nodetool status
       shell: "nodetool status"
       register: cstatus_out
       ignore_errors: yes
       when: 'ansible_hostname != first_host_in_cluster|string'
     - name: Status output
       debug:
         msg: "{{ cstatus_out.stdout.split('\n') }}"
       when: 'ansible_hostname != first_host_in_cluster|string'

...
